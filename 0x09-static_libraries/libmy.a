nt _putchar(char c)
/**
*/
int _islower(int c)
#include "main.h"
/**
 * _islower - check if letter c is in lowercase
 * @c: letter to be checked
 * Return: 1 if lower, 0 if capital
 */

int _islower(int c)
{
return (c >= 97 && c <= 122);
}
int _isalpha(int c)
#include "main.h"
/**
 * _isalpha - check if the character is a letter
 * @c: the character to be cheked
 *Return: 1 if letter, 0 otherwise
 */
int _isalpha(int c)
{
if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
{
return (1);
}
else
{
return (0);
}
}
int _abs(int n)
#include "main.h"
/**
 *_abs - entry to the program
 * @n: argument to be checked
 * Return: the absolte value of @n
 */


int _abs(int n)
{
                        return (n < 0 ? -1 * n : n);
}
int _isupper(int c)
#include <stdio.h>
#include "main.h"

/**
*_isupper - function that checks for uppercase character
*@c: character to be checked
*Return: 1 if character is uppercase, 0 if otherwise
*/
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}
int _isdigit(int c)
#include <stdio.h>
#include "main.h"

/**
 * _isdigit - function that checks for a digit 0 through 9
 * @c: character to be checked
 * Return: 1 if character is a digit , 0 if otherwise
 */

int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
else
{
return (0);
}
}
int _strlen(char *s)
#include <string.h>
#include "main.h"

/**
 * _strlen - function  returns the length of a string
 * @s: string to check
 * Return: the length of the string
 */

int _strlen(char *s)
{
        int i;

        i = 0;

        while (s[i] != '\0')
        {
        i++;
        }
        return (i);
}

void _puts(char *s)
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _puts -  function that prints a string followed by a new line to stdout
 * @str: string to be printed
 */
void _puts(char *str)
{
        int i;

        for (i = 0; str[i] != '\0'; ++i)
        {
        _putchar(str[i]);
        }
        _putchar('\n');
}
char *_strcpy(char *dest, char *src)
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
        int len, i;

        len = 0;

        while (src[len] != '\0')
        {
                len++;
        }

        for (i = 0; i < len; i++)
        {
                dest[i] = src[i];
        }
                dest[i] = '\0';

        return (dest);
}
int _atoi(char *s)
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
        int i, d, n, len, f, digit;

        i = 0;
        d = 0;
        n = 0;
        len = 0;
        f = 0;
        digit = 0;

        while (s[len] != '\0')
                len++;

        while (i < len && f == 0)
        {
                if (s[i] == '-')
                        ++d;

                if (s[i] >= '0' && s[i] <= '9')
                {

                        digit = s[i] - '0';
                        if (d % 2)
                                digit = -digit;
                        n = n * 10 + digit;
                        f = 1;
                        if (s[i + 1] < '0' || s[i + 1] > '9')
                                break;
                        f = 0;
  }
                i++;

                }

                if (f == 0)
                        return (0);

                return (n);
}
char *_strcat(char *dest, char *src)
#include <string.h>
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @src: string to be appended to dest
 * @dest: destination
 * Return:pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
        return (strcat(dest, src));
}
char *_strncat(char *dest, char *src, int n)
#include <string.h>
#include "main.h"

/**
 * _strncat -  function that concatenates two strings
 * @src: string to be appended to dest
 * @n: number of bytesfrom src
 * @dest: destination
 * Return:pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
        return (strncat(dest, src, n));
}
}
char *_strncpy(char *dest, char *src, int n)
#include <string.h>
#include "main.h"

/**
 * _strncpy-function that copies a string
 * @src: string to be appended to dest
 * @n: number of characters to copy
 * @dest: destination
 * Return:pointer to the resulting string dest
 */

char *_strncpy(char *dest, char *src, int n)
{
        return (strncpy(dest, src, n));
}
int _strcmp(char *s1, char *s2)
#include <string.h>
#include "main.h"

/**
 * _strcmp - function that compares two strings
 * @s1: first string to be compared
 * @s2: second string to be compared
 * Return: 0 for success
 */

int _strcmp(char *s1, char *s2)
{
        return (strcmp(s1, s2));
}
char *_memset(char *s, char b, unsigned int n)
#include <string.h>
#include "main.h"

/**
 * _memset - function fills the first n bytes of the memory area
 * pointed to by s with the constant byte b
 * @s: pointer  to the memory to be filledchar *_memset(char *s, char b, unsigned int n)
#include <string.h>
#include "main.h"

/**
 * _memset - function fills the first n bytes of the memory area
 * pointed to by s with the constant byte b
 * @s: pointer  to the memory to be filled
 * @b: value to be filled to the memory block
 * @n: number of bytes to be filled
 * Return: pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
        memset(s, b, n);
        return (s);
}
char *_memcpy(char *dest, char *src, unsigned int n)
#include <string.h>
#include "main.h"

/**
 * _memcpy - function copies n bytes from memory area src to memory area dest
 * @src: pointer to the source of data to be copied
 * @dest: destination where content is to copied
 * @n: number of bytes to copied
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
        memcpy(dest, src, n);
        return (dest);
}int _putchar(char c)
/**
*/
int _islower(int c)
#include "main.h"
/**
 * _islower - check if letter c is in lowercase
 * @c: letter to be checked
 * Return: 1 if lower, 0 if capital
 */

int _islower(int c)
{
return (c >= 97 && c <= 122);
}
int _isalpha(int c)
#include "main.h"
/**
 * _isalpha - check if the character is a letter
 * @c: the character to be cheked
 *Return: 1 if letter, 0 otherwise
 */
int _isalpha(int c)
{
if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
{
return (1);
}
else
{
return (0);
}
}
int _abs(int n)
#include "main.h"
/**
 *_abs - entry to the program
 * @n: argument to be checked
 * Return: the absolte value of @n
 */


int _abs(int n)
{
                        return (n < 0 ? -1 * n : n);
}
int _isupper(int c)
#include <stdio.h>
#include "main.h"

/**
*_isupper - function that checks for uppercase character
*@c: character to be checked
*Return: 1 if character is uppercase, 0 if otherwise
*/
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}
int _isdigit(int c)
#include <stdio.h>
#include "main.h"

/**
 * _isdigit - function that checks for a digit 0 through 9
 * @c: character to be checked
 * Return: 1 if character is a digit , 0 if otherwise
 */

int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
else
{
return (0);
}
}
int _strlen(char *s)
#include <string.h>
#include "main.h"

/**
 * _strlen - function  returns the length of a string
 * @s: string to check
 * Return: the length of the string
 */

int _strlen(char *s)
{
        int i;

        i = 0;

        while (s[i] != '\0')
        {
        i++;
        }
        return (i);
}

void _puts(char *s)
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _puts -  function that prints a string followed by a new line to stdout
 * @str: string to be printed
 */
void _puts(char *str)
{
        int i;

        for (i = 0; str[i] != '\0'; ++i)
        {
        _putchar(str[i]);
        }
        _putchar('\n');
}
char *_strcpy(char *dest, char *src)
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
        int len, i;

        len = 0;

        while (src[len] != '\0')
        {
                len++;
        }

        for (i = 0; i < len; i++)
        {
                dest[i] = src[i];
        }
                dest[i] = '\0';

        return (dest);
}
int _atoi(char *s)
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
        int i, d, n, len, f, digit;

        i = 0;
        d = 0;
        n = 0;
        len = 0;
        f = 0;
        digit = 0;

        while (s[len] != '\0')
                len++;

        while (i < len && f == 0)
        {
                if (s[i] == '-')
                        ++d;

                if (s[i] >= '0' && s[i] <= '9')
                {

                        digit = s[i] - '0';
                        if (d % 2)
                                digit = -digit;
                        n = n * 10 + digit;
                        f = 1;
                        if (s[i + 1] < '0' || s[i + 1] > '9')
                                break;
                        f = 0;
  }
                i++;

                }

                if (f == 0)
                        return (0);

                return (n);
}
char *_strcat(char *dest, char *src)
#include <string.h>
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @src: string to be appended to dest
 * @dest: destination
 * Return:pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
        return (strcat(dest, src));
}
char *_strncat(char *dest, char *src, int n)
#include <string.h>
#include "main.h"

/**
 * _strncat -  function that concatenates two strings
 * @src: string to be appended to dest
 * @n: number of bytesfrom src
 * @dest: destination
 * Return:pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
        return (strncat(dest, src, n));
}
}
char *_strncpy(char *dest, char *src, int n)
#include <string.h>
#include "main.h"

/**
 * _strncpy-function that copies a string
 * @src: string to be appended to dest
 * @n: number of characters to copy
 * @dest: destination
 * Return:pointer to the resulting string dest
 */

char *_strncpy(char *dest, char *src, int n)
{
        return (strncpy(dest, src, n));
}
int _strcmp(char *s1, char *s2)
#include <string.h>
#include "main.h"

/**
 * _strcmp - function that compares two strings
 * @s1: first string to be compared
 * @s2: second string to be compared
 * Return: 0 for success
 */

int _strcmp(char *s1, char *s2)
{
        return (strcmp(s1, s2));
}
char *_memset(char *s, char b, unsigned int n)
#include <string.h>
#include "main.h"

/**
 * _memset - function fills the first n bytes of the memory area
 * pointed to by s with the constant byte b
 * @s: pointer  to the memory to be filledchar *_memset(char *s, char b, unsigned int n)
#include <string.h>
#include "main.h"

/**
 * _memset - function fills the first n bytes of the memory area
 * pointed to by s with the constant byte b
 * @s: pointer  to the memory to be filled
 * @b: value to be filled to the memory block
 * @n: number of bytes to be filled
 * Return: pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
        memset(s, b, n);
        return (s);
}
char *_memcpy(char *dest, char *src, unsigned int n)
#include <string.h>
#include "main.h"

/**
 * _memcpy - function copies n bytes from memory area src to memory area dest
 * @src: pointer to the source of data to be copied
 * @dest: destination where content is to copied
 * @n: number of bytes to copied
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
        memcpy(dest, src, n);
        return (dest);
}
char *_strchr(char *s, char c);
#include "main.h"

/**
 * *_strchr - fills memory with a constant byte.
 * @s: pointer to put the constant
 * @c: constant
 * Return: s
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'  ; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}

	return ('\0');
}
unsigned int _strspn(char *s, char *accept);
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 *
 * @s: string.
 * @accept: bytes.
 * Return: unsigned int.
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
			if (accept[j] == '\0')
				return (i);
		}
	}
	return (i);
}
char *_strpbrk(char *s, char *accept);
#include "main.h"

/**
 * _strpbrk - Search a string for any of a set of bytes.
 * @s: string
 * @accept: string to match
 * Return: Pointer to the byte in `s` that matches one of the bytes in `accept`
 * or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *p;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (accept[j] == s[i])
			{
				p = &s[i];
				return (p);
			}
			j++;
		}
		i++;
	}

	return (0);
}
char *_strstr(char *haystack, char *needle);
#include "main.h"
#include <stdio.h>
/**
 * *_strstr - description
 * @haystack: string
 * @needle: pointer
 * Return: pointer
 */


char *_strstr(char *haystack, char *needle)
{
int i, j;

for (i = 0; haystack[i] > '\0'; i++)
{
	for (j = i; haystack[j] > '\0' && needle[j - i] > '\0'; j++)
	{
		if (haystack[j] != needle[j - i])
		{
			break;
		}
	}
	if (needle[j - i] == '\0')
	{
		return (haystack + i);
	}
}
return (0);
}
